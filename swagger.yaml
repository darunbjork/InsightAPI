# swagger.yaml
# OpenAPI 3.0 Specification for the ThoughtStream API

openapi: 3.0.0
info:
  title: ThoughtStream Social API
  version: 1.0.0
  description: The backend service for a simple social media platform, built with Express and MongoDB.
  contact:
    name: AI Assistant
servers:
  - url: http://localhost:5000/api/v1
    description: Development Server
  - url: https://api.thoughtstream.com/api/v1
    description: Production Server

tags:
  - name: Authentication
    description: User registration, login, and token management
  - name: Posts
    description: CRUD operations for social posts
  - name: Comments
    description: Interaction features for posts
  - name: Likes
    description: Polymorphic liking of posts and comments

# --- Components (Reusable Schemas) ---
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: fail
        code:
          type: string
          example: INVALID_INPUT_DATA
        message:
          type: string
          example: Validation error: title Post title is required..
    AuthToken:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI..."
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI..."
    Post:
      type: object
      properties:
        id:
          type: string
          example: "60c72b1f8f9e6d0015b6d9e0"
        title:
          type: string
          example: "My First Thought"
        content:
          type: string
          example: "This is a detailed thought content."
        commentCount:
          type: integer
          example: 5
        likeCount:
          type: integer
          example: 12
        author:
          type: object
          properties:
            id:
              type: string
            username:
              type: string

# --- Paths (Endpoints) ---
paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User created successfully.
        '400':
          $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict, user already exists.
  
  /posts:
    get:
      tags:
        - Posts
      summary: Get paginated list of posts (The Feed)
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Successful retrieval of posts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  totalPages:
                    type: integer
                    example: 5
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'

# (The rest of the endpoints would follow here...)